<?xml version="1.0" encoding="utf-8"?>
<!--
Reference:		http://www.mathsisfun.com/polar-cartesian-coordinates.html
-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   minWidth="955" minHeight="600" creationComplete="onCreationComplete()"
			   viewSourceURL="srcview/index.html">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.ctyeung.GonzalesThinPB;
			import com.ctyeung.GonzalesThining;
			import com.ctyeung.distanceMap.DistanceMap;
			
			import flash.display.Shader;
			import flash.display.ShaderJob;
			import flash.filters.ShaderFilter;
			import flash.geom.Point;
			import flash.utils.ByteArray;
			
			import mx.collections.ArrayCollection;
			import mx.managers.CursorManager;
			
			public static const BACKGROUND_COLOR:uint = 0xFEFEFF;
			public static const SHAPE_BOUND_COLOR:uint = 0xFF0000;
			
			private var listPts:Array;
			private var bFirst:Boolean=true;
			protected var disMap:DistanceMap;
			protected var thin:GonzalesThining;
			protected var thinPB:GonzalesThinPB;
			protected static const LENGTH:int = 400;
			
			[Bindable]protected var listCombo:ArrayCollection;

			protected function onCreationComplete():void {
				listCombo = new ArrayCollection(["distance", "thinning", "thinPixelBender"]);
				onClickClear();
				this.cmbMethod.selectedIndex = 0;
				uic.addEventListener(MouseEvent.CLICK, onMouseClick, false, 0, true);
			}
			
			protected function onClickDemo():void {
				var listX:Array = [.694, 1.292, 1.694, 1.5, 2.111, 2.5, 2.75, 3.277, 3.305, 3.805, 4.374, 3.999, 4.472, 5.027, 4.138, 2.097];
				var listY:Array = [2.444, 2.18, 2.722, .736, .680, 2.541, .639, .694, 2.652, .75, .792, 2.694, 1.208, 1.292, 4.482, 4.680];
				
				for (var i:int=0; i<listX.length; i++) {
					listX[i] *= 70;
					listY[i] *= 70;
				}
				onMouseClick(new MouseEvent("click", false, false, listX[0], listY[0]));
				onMouseClick(new MouseEvent("click", false, false, listX[1], listY[1]));
				onMouseClick(new MouseEvent("click", false, false, listX[2], listY[2]));
				onMouseClick(new MouseEvent("click", false, false, listX[3], listY[3]));
				onMouseClick(new MouseEvent("click", false, false, listX[4], listY[4]));
				onMouseClick(new MouseEvent("click", false, false, listX[5], listY[5]));
				onMouseClick(new MouseEvent("click", false, false, listX[6], listY[6]));
				onMouseClick(new MouseEvent("click", false, false, listX[7], listY[7]));
				onMouseClick(new MouseEvent("click", false, false, listX[8], listY[8]));
				onMouseClick(new MouseEvent("click", false, false, listX[9], listY[9]));
				onMouseClick(new MouseEvent("click", false, false, listX[10], listY[10]));
				onMouseClick(new MouseEvent("click", false, false, listX[11], listY[11]));
				onMouseClick(new MouseEvent("click", false, false, listX[12], listY[12]));
				onMouseClick(new MouseEvent("click", false, false, listX[13], listY[13]));
				onMouseClick(new MouseEvent("click", false, false, listX[14], listY[14]));
				onMouseClick(new MouseEvent("click", false, false, listX[15], listY[15]));
				onMouseClick(new MouseEvent("click", false, false, listX[0], listY[0]));

			}
			
			protected function onMouseClick(event:MouseEvent):void {
				listPts.push(new Point(event.localX, event.localY));
				uic.graphics.lineStyle(1, SHAPE_BOUND_COLOR);
				if(bFirst) {
					uic.graphics.moveTo(event.localX, event.localY);
					bFirst = false;
				}
				else {
					uic.graphics.lineTo(event.localX, event.localY);
					uic.graphics.moveTo(event.localX, event.localY);
				}
				uic.graphics.endFill();
			}
			
			protected function onClickClear():void {
				bFirst = true;
				btnApply.enabled = true;
				listPts = [];
				uic.graphics.clear();
				uic.graphics.beginFill(BACKGROUND_COLOR);
				uic.graphics.drawRect(0,0,LENGTH,LENGTH);
				uic.graphics.endFill();
				
				while(uic.numChildren)
					uic.removeChildAt(0);
			}
			
			protected function onCompleteThin(e:Event):void {
				CursorManager.removeBusyCursor();
				uic.addChild(new Bitmap(thinPB.bmd));
				var end:Date = new Date();
				txtTime.text = "time:" + (end.time - stt.time).toString() + "ms";

			}
			
			protected var stt:Date;
			protected function onClickSkeleton():void {
				stt = new Date();
				CursorManager.setBusyCursor();
				btnApply.enabled = false;
				
				switch(this.cmbMethod.selectedIndex) {
					case 0:
						if(!disMap)
							disMap = new DistanceMap(uic.width, uic.height);
						
						disMap.apply(uic, chkThreshold.selected, slide.value);
						uic.addChild(new Bitmap(disMap.bmd));
						break;
					
					case 1:
						if(!thin)
							thin = new GonzalesThining(uic.width, uic.height);
						
						thin.apply(uic);
						uic.addChild(new Bitmap(thin.bmd));
						break;
					
					case 2:
						if(!thinPB) {
							thinPB = new GonzalesThinPB(uic.width, uic.height);
							thinPB.addEventListener(Event.COMPLETE, onCompleteThin, false, 0, true);
						}
						thinPB.apply(uic);
						uic.graphics.clear();
						return;
				}
				
				CursorManager.removeBusyCursor();
				var end:Date = new Date();
				txtTime.text = "time:" + (end.time - stt.time).toString() + "ms";
			}
			
			protected function onChangeThreshold():void {
				if(disMap) {
					disMap.adjThreshold(chkThreshold.selected, slide.value);
					if(uic.numChildren>1)
						uic.removeChildAt(1);
					
					uic.addChild(new Bitmap(disMap.bmdThres));
				}
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" horizontalAlign="center">
		<s:HGroup>
			<mx:HBox borderColor="0x0" borderStyle="solid" >
				<mx:UIComponent id="uic" width="{LENGTH}" height="{LENGTH}"/>
			</mx:HBox>
			<s:VGroup>
				<s:Spacer height="100"/>
				<s:Label text="Skeleton Exercises"/>
				<s:DropDownList id="cmbMethod"
								dataProvider="{listCombo}" 
								prompt="distance" />
				<s:Spacer height="100"/>
				<s:Button id="btnClear" label="Clear" click="onClickClear()"/>
				<s:Button id="btnApply" label="Apply" click="onClickSkeleton()"/>
				<s:Button id="btnDemo" label="demo" click="onClickDemo()"/>
				<s:Label id="txtTime" />
			</s:VGroup>
		</s:HGroup>
		
		<s:HGroup>
			<s:CheckBox id="chkThreshold" label="Threshold" click="onChangeThreshold()"/>
			<s:Spacer width="20"/>
			<mx:Slider id="slide" minimum="0" maximum="255" value="20" mouseUp="onChangeThreshold()"/>
		</s:HGroup>
		
		<s:VGroup horizontalAlign="left">
			<s:Spacer height="500"/>
			<s:Label text="1)Button Demo or Mouse clicks to create a CLOSED LOOP shape."/>
			<s:Label text="2)Button Apply to perform distance map or thinning."/>
			<s:Label text="3)For distance-map, select threshold, adjust slider to evalute erosion"/>
		</s:VGroup>
	</s:VGroup>
</s:Application>
